// For handling JavaScript, mostly improvements to JSDOM

'use strict';

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Set = require('babel-runtime/core-js/set')['default'];

var DOM = require('./index');
var resourceLoader = require('jsdom/lib/jsdom/browser/resource-loader');
var reportException = require('jsdom/lib/jsdom/living/helpers/runtime-script-errors');
var VM = require('vm');

var _require = require('./impl');

var HTMLScriptElementImpl = _require.HTMLScriptElementImpl;

// -- Patches to JSDOM --
Object.defineProperty(HTMLScriptElementImpl, 'init', {
  value: function value(obj, privateData) {
    obj._attach = function () {
      Object.getPrototypeOf(this.constructor).prototype._attach.call(this);

      var script = this;
      var document = script.ownerDocument;

      if (script.src)
        // Script has a src attribute, load external resource.
        resourceLoader.load(script, script.src, {}, _eval.bind(script));else {
        var filename = script.id ? document.URL + ':#' + script.id : document.URL + ':script';
        // Queue to be executed in order with all other scripts
        var executeInOrder = resourceLoader.enqueue(script, filename, executeInlineScript);
        // There are two scenarios:
        // - script element added to existing document, we should evaluate it
        //   immediately
        // - inline script element parsed, when we get here, we still don't have
        //   the element contents, so we have to wait before we can read and
        //   execute it
        if (document.readyState === 'loading') process.nextTick(executeInOrder);else executeInOrder();
      }

      // Execute inline script
      function executeInlineScript(code, filename) {
        _eval.call(script, script.textContent, filename);
        // script._eval(script.textContent, filename);
      }
    };
  }
});

function _eval(text, filename) {
  var typeString = this._getTypeString();
  var _defaultView = this._ownerDocument._defaultView;
  if (_defaultView && _defaultView._runScripts === "dangerously" && jsMIMETypes.has(typeString.toLowerCase())) {
    this._ownerDocument._writeAfterElement = this;
    processJavaScript(this, text, filename);
    delete this._ownerDocument._writeAfterElement;
  }
}

function processJavaScript(element, buffer, filename) {
  var code = buffer.toString();
  // This may be called without code, e.g. script element that has no body yet
  if (!code) return;

  // Surpress JavaScript validation and execution
  var document = element.ownerDocument;
  var window = document.defaultView;
  var browser = window.top.browser;
  if (browser && !browser.runScripts) return;

  // This may be called without code, e.g. script element that has no body yet
  try {
    window.document._currentScript = element;
    window._evaluate(code, filename);
  } catch (error) {
    enhanceStackTrace(error, document.location.href);
    reportException(window, error);
  } finally {
    window.document._currentScript = null;
  }
};

function enhanceStackTrace(error, document_ref) {
  var partial = [];
  // "RangeError: Maximum call stack size exceeded" doesn't have a stack trace
  if (error.stack) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _getIterator(error.stack.split('\n')), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var line = _step.value;

        if (~line.indexOf('vm.js')) break;
        partial.push(line);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }partial.push('    in ' + document_ref);
  error.stack = partial.join('\n');
  return error;
}

var jsMIMETypes = new _Set(["application/ecmascript", "application/javascript", "application/x-ecmascript", "application/x-javascript", "text/ecmascript", "text/javascript", "text/javascript1.0", "text/javascript1.1", "text/javascript1.2", "text/javascript1.3", "text/javascript1.4", "text/javascript1.5", "text/jscript", "text/livescript", "text/x-ecmascript", "text/x-javascript"]);
//# sourceMappingURL=scripts.js.map
