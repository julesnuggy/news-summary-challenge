{"version":3,"sources":["dom/scripts.js"],"names":[],"mappings":"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","file":"scripts.js","sourcesContent":["// For handling JavaScript, mostly improvements to JSDOM\n\nconst DOM             = require('./index');\nconst resourceLoader  = require('jsdom/lib/jsdom/browser/resource-loader');\nconst reportException = require('jsdom/lib/jsdom/living/helpers/runtime-script-errors');\nconst VM              = require('vm');\nconst {\n  HTMLScriptElementImpl\n}                     = require('./impl');\n\n// -- Patches to JSDOM --\nObject.defineProperty(HTMLScriptElementImpl, 'init', {\n  value: function(obj, privateData) {\n    obj._attach = function(){\n      Object.getPrototypeOf(this.constructor).prototype._attach.call(this)\n\n      const script    = this;\n      const document  = script.ownerDocument;\n\n      if (script.src)\n        // Script has a src attribute, load external resource.\n        resourceLoader.load(script, script.src, {}, _eval.bind(script));\n      else {\n        const filename = script.id ?  `${document.URL}:#${script.id}` : `${document.URL}:script`;\n        // Queue to be executed in order with all other scripts\n        const executeInOrder = resourceLoader.enqueue(script, filename, executeInlineScript);\n        // There are two scenarios:\n        // - script element added to existing document, we should evaluate it\n        //   immediately\n        // - inline script element parsed, when we get here, we still don't have\n        //   the element contents, so we have to wait before we can read and\n        //   execute it\n        if (document.readyState === 'loading')\n          process.nextTick(executeInOrder);\n        else\n          executeInOrder();\n      }\n\n      // Execute inline script\n      function executeInlineScript(code, filename) {\n        _eval.call(script, script.textContent, filename);\n        // script._eval(script.textContent, filename);\n      }\n\n    }\n  }\n});\n\n\nfunction _eval(text, filename) {\n  const typeString = this._getTypeString();\n  const _defaultView = this._ownerDocument._defaultView;\n  if (_defaultView && _defaultView._runScripts === \"dangerously\" && jsMIMETypes.has(typeString.toLowerCase())) {\n    this._ownerDocument._writeAfterElement = this;\n    processJavaScript(this, text, filename);\n    delete this._ownerDocument._writeAfterElement;\n  }\n}\n\n\nfunction processJavaScript (element, buffer, filename) {\n  const code = buffer.toString();\n  // This may be called without code, e.g. script element that has no body yet\n  if (!code)\n    return;\n\n  // Surpress JavaScript validation and execution\n  const document = element.ownerDocument;\n  const window   = document.defaultView;\n  const browser  = window.top.browser;\n  if (browser && !browser.runScripts)\n    return;\n\n  // This may be called without code, e.g. script element that has no body yet\n  try {\n    window.document._currentScript = element;\n    window._evaluate(code, filename);\n  } catch (error) {\n    enhanceStackTrace(error, document.location.href);\n    reportException(window, error);\n  } finally {\n    window.document._currentScript = null;\n  }\n};\n\nfunction enhanceStackTrace(error, document_ref) {\n  const partial = [];\n  // \"RangeError: Maximum call stack size exceeded\" doesn't have a stack trace\n  if (error.stack)\n    for (let line of error.stack.split('\\n')) {\n      if (~line.indexOf('vm.js'))\n        break;\n      partial.push(line);\n    }\n  partial.push(`    in ${document_ref}`);\n  error.stack = partial.join('\\n');\n  return error;\n}\n\nconst jsMIMETypes = new Set([\n  \"application/ecmascript\",\n  \"application/javascript\",\n  \"application/x-ecmascript\",\n  \"application/x-javascript\",\n  \"text/ecmascript\",\n  \"text/javascript\",\n  \"text/javascript1.0\",\n  \"text/javascript1.1\",\n  \"text/javascript1.2\",\n  \"text/javascript1.3\",\n  \"text/javascript1.4\",\n  \"text/javascript1.5\",\n  \"text/jscript\",\n  \"text/livescript\",\n  \"text/x-ecmascript\",\n  \"text/x-javascript\"\n]);\n"]}